import os.path

Import('env', 'lib_env', 'gen_env', 'tool_env', 'test_env', 'pulse_env')

env.Append(CPPPATH=['#src/modules'])

for targetdir in env.GlobRecursive('modules', 'target_*'):
    if targetdir.name in env['ROC_TARGETS']:
        env.Append(CPPPATH=['#src/%s' % targetdir])

for module in env['ROC_MODULES']:
    moduledir = 'modules/' + module

    cenv = env.Clone()
    cenv.AppendVars(tool_env)
    cenv.Append(CPPDEFINES=('ROC_MODULE', module))

    sources = env.Glob('%s/*.cpp' % moduledir)
    for targetdir in env.GlobRecursive(moduledir, 'target_*'):
        if targetdir.name in env['ROC_TARGETS']:
            sources += env.GlobRecursive(targetdir, '*.cpp')

    if not sources:
        continue

    lib = cenv.StaticLibrary(module, sources)
    env.Alias(module, [lib], env.Action(''))
    env.AlwaysBuild(module)

    env.Prepend(LIBS=[lib])

libroc = None

if not GetOption('disable_lib'):
    cenv = env.Clone()
    cenv.AppendVars(lib_env)
    cenv.Append(CPPDEFINES=('ROC_MODULE', 'roc_lib'))
    cenv.Append(CPPPATH=['lib/include'])

    sources = env.Glob('lib/src/*.cpp')
    libroc = cenv.SharedLibrary('roc', sources)
    env.Depends(libroc, '#src/lib/roc.version')

    target = env.Install(env['ROC_BINDIR'], libroc)

    env.Alias('libroc', [target], env.Action(''))
    env.AlwaysBuild('libroc')

    env.AddDistfile(GetOption('prefix'), 'include', '#src/lib/include/roc')
    env.AddDistfile(GetOption('prefix'), 'lib', target)

if not GetOption('disable_examples'):
    cenv = env.Clone()
    cenv.AppendVars(tool_env)
    cenv.Append(CPPPATH=['lib/include'])
    cenv.Append(LIBS=['roc'])

    targets = []

    for source in env.Glob('lib/example/*.c'):
        example = os.path.splitext(source.name)[0]
        exename = 'roc-example-' + example.replace('_', '-')

        if example.endswith('_sox') and GetOption('disable_sox'):
            continue

        exe = cenv.Program(exename, [source],
                    RPATH=env.Literal('\\$$ORIGIN'))

        env.Depends(exe, libroc)
        targets.append(env.Install(env['ROC_BINDIR'], exe))

    env.Alias('examples', targets, env.Action(''))
    env.AlwaysBuild('examples')

if not GetOption('disable_tests'):
    cenv = env.Clone()
    cenv.AppendVars(tool_env)
    cenv.AppendVars(test_env)
    cenv.Append(CPPDEFINES=('ROC_MODULE', 'roc_test'))

    test_main = cenv.Object('tests/test_main.cpp')

    for testname in env['ROC_MODULES'] + ['roc_lib']:
        testdir = 'tests/' + testname

        ccenv = cenv.Clone()
        ccenv.Append(CPPPATH=['#src/%s' % testdir])

        if testname == 'roc_lib':
            ccenv.Append(CPPPATH=['lib/include'])
            ccenv.Prepend(LIBS=['roc'])

        sources = env.Glob('%s/*.cpp' % testdir)
        for targetdir in env.GlobRecursive(testdir, 'target_*'):
            if targetdir.name in env['ROC_TARGETS']:
                ccenv.Append(CPPPATH=['#src/%s' % targetdir])
                sources += env.GlobRecursive(targetdir, '*.cpp')

        if not sources:
            continue

        exename = 'roc-test-' + testname.replace('roc_', '')
        target = env.Install(env['ROC_BINDIR'],
            ccenv.Program(exename, sources + test_main,
                RPATH=env.Literal('\\$$ORIGIN')))

        env.AddTest(testname, '%s/%s' % (env['ROC_BINDIR'], exename))

if not GetOption('disable_tools'):
    for tooldir in env.GlobDirs('tools/*'):
        cenv = env.Clone()
        cenv.AppendVars(tool_env)
        cenv.Append(CPPDEFINES=('ROC_MODULE', tooldir.name))
        cenv.Append(CPPPATH=['tools', '#src/tools/%s' % tooldir.name])

        sources = env.Glob('%s/*.cpp' % tooldir)
        objects = []
        for ggo in env.Glob('%s/*.ggo' % tooldir):
            objects += gen_env.GenGetOpt(ggo, env['ROC_VERSION'])

        exename = tooldir.name.replace('roc_', 'roc-')
        target = env.Install(env['ROC_BINDIR'],
                    cenv.Program(exename, sources+objects))

        env.Alias(exename, [target], env.Action(''))
        env.AlwaysBuild(exename)

        env.AddDistfile(GetOption('prefix'), 'bin', target)

if GetOption('enable_pulseaudio_modules'):
    cenv = env.Clone()
    cenv.AppendVars(pulse_env)
    cenv.Append(CPPPATH=['lib/include'])
    cenv.Append(LIBS=['roc'])

    helpers = cenv.Object('pulse/module_helpers.c')
    targets = []

    for source in env.Glob('pulse/module-*.c'):
        module = os.path.splitext(source.name)[0]

        modulelib = cenv.SharedLibrary(module, [source, helpers], LIBPREFIX='')
        env.Depends(modulelib, libroc)

        target = env.Install(env['ROC_BINDIR'], modulelib)
        targets.append(target)

        env.AddDistfile(GetOption('prefix'),
                        'lib/pulse-%s/modules' % env['ROC_PULSE_VERSION'],
                        target)

    env.Alias('pulse', targets, env.Action(''))
    env.AlwaysBuild('pulse')
